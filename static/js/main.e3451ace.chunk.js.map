{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","intervalId","setintervalId","isStarted","setIsStarted","isPaused","setIsPaused","pausedTime","setPausedTime","hours","mins","secs","clockFace","setClockFace","startAndStop","evt","target","name","clearInterval","startTime","Date","now","setInterval","deltaTime","getTimeComponents","currentTime","time","pad","Math","floor","value","String","padStart","className","onClick","detail","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA8EeA,MA3Ef,WACE,MAAoCC,mBAAS,MAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAoCN,mBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAkCR,mBAAS,CAACS,MAAO,KAAMC,KAAM,KAAMC,KAAM,OAA3E,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,SAASC,EAAaC,GAEpB,IAAkB,IAAdZ,EAA0C,UAApBY,EAAIC,OAAOC,KAAkB,CAE7B,UAApBF,EAAIC,OAAOC,MACbC,cAAcjB,GAGhB,IAAMkB,EAAYC,KAAKC,MACvBjB,GAAa,GAEbF,EAAcoB,aAAY,WACxB,IAAiB,IAAbjB,EAAoB,CACtB,IACMkB,EADcH,KAAKC,MACOF,EAChCX,EAAce,GACdV,EAAaW,EAAkBD,IAEjC,IAAiB,IAAblB,EAAmB,CACrBC,GAAY,GACZ,IAAMmB,EAAcL,KAAKC,MAEzBR,EAAaW,EADKC,EAAcN,EAAYZ,OAG/C,OAGe,IAAdJ,IAAmC,IAAbE,IACxBa,cAAcjB,GACdY,EAAa,CAACJ,MAAO,KAAMC,KAAM,KAAMC,KAAM,OAC7CP,GAAa,IAYjB,SAASoB,EAAkBE,GAO3B,MAAO,CAAEjB,MANKkB,EACZC,KAAKC,MAAOH,EAAI,MAAL,OAKGhB,KAHHiB,EAAIC,KAAKC,MAAOH,EAAI,KAAL,MAGNf,KAFTgB,EAAIC,KAAKC,MAAOH,EAAI,IAAkB,OAKnD,SAASC,EAAIG,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,KAGnC,OACE,sBAAKC,UAAU,UAAf,UACE,uBAAMA,UAAU,aAAhB,UAA8BrB,EAAUH,MAAxC,IAAgDG,EAAUF,KAA1D,IAAiEE,EAAUD,QAC3E,sBAAKsB,UAAU,kBAAf,UACE,wBAAQC,QAASpB,EAAcmB,UAAU,SAAzC,wBACA,wBAAQA,UAAU,SAASC,QA3BjC,SAAcnB,GACY,SAApBA,EAAIC,OAAOC,MAAkC,IAAfF,EAAIoB,SACpCjB,cAAcjB,GACdK,GAAY,GACZF,GAAa,KAuB+Ba,KAAK,OAA/C,kBACA,wBAAQiB,QAASpB,EAAcG,KAAK,QAAQgB,UAAU,SAAtD,0BC5DOG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e3451ace.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css'\n\nfunction App() {\n  const [intervalId, setintervalId] = useState(null)\n  const [isStarted, setIsStarted] = useState(false)\n  const [isPaused, setIsPaused] = useState(false)\n  const [pausedTime, setPausedTime] = useState(0)\n  const [clockFace, setClockFace] = useState({hours: \"00\", mins: \"00\", secs: \"00\"})\n\n  function startAndStop(evt) {\n    \n    if (isStarted === false | evt.target.name === 'reset') {\n      \n      if (evt.target.name === 'reset') {\n        clearInterval(intervalId);\n      }\n\n      const startTime = Date.now();\n      setIsStarted(true);\n      \n      setintervalId(setInterval(() => {\n        if (isPaused === false) {\n          const currentTime = Date.now();\n          const deltaTime = currentTime - startTime;\n          setPausedTime(deltaTime)\n          setClockFace(getTimeComponents(deltaTime))\n        }\n        if (isPaused === true) {\n          setIsPaused(false);\n          const currentTime = Date.now();\n          const deltaTime = currentTime - startTime + pausedTime;\n          setClockFace(getTimeComponents(deltaTime))\n        }\n    }, 1000))\n    }\n    \n    if (isStarted === true && isPaused === false) {\n      clearInterval(intervalId)\n      setClockFace({hours: \"00\", mins: \"00\", secs: \"00\"})\n      setIsStarted(false)\n    }\n  }\n\n  function wait(evt) {\n    if (evt.target.name === 'wait' && evt.detail === 2) {\n      clearInterval(intervalId)\n      setIsPaused(true)\n      setIsStarted(false);\n      }\n  }\n\n  function getTimeComponents(time) {\n  const hours = pad(\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n  );\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n  return { hours, mins, secs };\n}\n\n  function pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  return (\n    <div className='wrapper'>\n      <span className='clock-face'>{clockFace.hours}:{clockFace.mins}:{clockFace.secs}</span>\n      <div className='buttons-wrapper'>\n        <button onClick={startAndStop} className='button'>Start/Stop</button>\n        <button className='button' onClick={wait} name='wait'>Wait</button>\n        <button onClick={startAndStop} name='reset' className='button'>Reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}